#include "stdafx.h"
#include "cpu.h"
#include "vga.h"
#include "ioports.h"

#define VMODE_BW40x25		0x00
#define VMODE_COL40x25		0x01
#define VMODE_BW80x25		0x02
#define VMODE_COL80x25		0x03
#define VMODE_COL320x200	0x04
#define VMODE_BW320x200		0x05
#define VMODE_BW640x200		0x06
#define VMODE_EGA320x200	0x09
#define VMODE_EGA320x200D	0x0D
#define VMODE_EGA640x350	0x10
#define VMODE_BW640x480		0x11
#define VMODE_VGA640x480	0x12
#define VMODE_VGA320x200	0x13
#define VMODE_VGA640x480x8	0x14

unsigned int screen[SCREEN_WIDTH * SCREEN_HEIGHT];

typedef union
{
	unsigned char b[4];
	unsigned short w[2];
	unsigned int d;
} reg_t;

int vmode = 3;
int vga_lines = 400;

unsigned char crt_regs[32] = {0};
unsigned char cga_color_cr = 0;
unsigned char vga_palette[1024] = {0};
unsigned int ega_palette[16] = {0};
int vga_pan = 0;
unsigned int vram[1024 * 1024];
int vga_3da = 0;
int vga_pal_mask = 0xFF;
int vga_pal_index = 0;
int vga_pal_read_index = 0;
int vga_read_map = 0;

unsigned char ac_regs[32];
unsigned char sq_regs[16] = {0, 0, 0, 0, 0xFF};
unsigned char gc_regs[32];

unsigned char ac_index = 0;
unsigned char sq_index = 0;
unsigned char gc_index = 0;
unsigned char crt_index = 0;

unsigned int vga_plane_mask = 0xFFFFFFFFu;
unsigned int write_mask = 0xFFFFFFFFu;
reg_t vga_latch;
int vga_write_mode = 0;
int vga_logic_op = 0;
unsigned int fill_color = 0;
unsigned int fill_mask = 0;
int vga_rotate = 0;

int vga_planar = 0;

int ac_index_state = 1;
int vga_read_mode = 0;
unsigned char vga_color_compare = 0;
unsigned char vga_color_dontcare = 0;

int svga_page = 0;

const unsigned int bit_fill[16] = 
{
	0x00000000u, 0x000000FFu, 0x0000FF00u, 0x0000FFFFu, 0x00FF0000u, 0x00FF00FFu, 0x00FFFF00u, 0x00FFFFFFu,
	0xFF000000u, 0xFF0000FFu, 0xFF00FF00u, 0xFF00FFFFu, 0xFFFF0000u, 0xFFFF00FFu, 0xFFFFFF00u, 0xFFFFFFFFu
};

const unsigned int byte_fill[256] = {
	0x00000000, 0x01010101, 0x02020202, 0x03030303, 0x04040404, 0x05050505, 0x06060606, 0x07070707, 
	0x08080808, 0x09090909, 0x0A0A0A0A, 0x0B0B0B0B, 0x0C0C0C0C, 0x0D0D0D0D, 0x0E0E0E0E, 0x0F0F0F0F, 
	0x10101010, 0x11111111, 0x12121212, 0x13131313, 0x14141414, 0x15151515, 0x16161616, 0x17171717, 
	0x18181818, 0x19191919, 0x1A1A1A1A, 0x1B1B1B1B, 0x1C1C1C1C, 0x1D1D1D1D, 0x1E1E1E1E, 0x1F1F1F1F, 
	0x20202020, 0x21212121, 0x22222222, 0x23232323, 0x24242424, 0x25252525, 0x26262626, 0x27272727, 
	0x28282828, 0x29292929, 0x2A2A2A2A, 0x2B2B2B2B, 0x2C2C2C2C, 0x2D2D2D2D, 0x2E2E2E2E, 0x2F2F2F2F, 
	0x30303030, 0x31313131, 0x32323232, 0x33333333, 0x34343434, 0x35353535, 0x36363636, 0x37373737, 
	0x38383838, 0x39393939, 0x3A3A3A3A, 0x3B3B3B3B, 0x3C3C3C3C, 0x3D3D3D3D, 0x3E3E3E3E, 0x3F3F3F3F, 
	0x40404040, 0x41414141, 0x42424242, 0x43434343, 0x44444444, 0x45454545, 0x46464646, 0x47474747, 
	0x48484848, 0x49494949, 0x4A4A4A4A, 0x4B4B4B4B, 0x4C4C4C4C, 0x4D4D4D4D, 0x4E4E4E4E, 0x4F4F4F4F, 
	0x50505050, 0x51515151, 0x52525252, 0x53535353, 0x54545454, 0x55555555, 0x56565656, 0x57575757, 
	0x58585858, 0x59595959, 0x5A5A5A5A, 0x5B5B5B5B, 0x5C5C5C5C, 0x5D5D5D5D, 0x5E5E5E5E, 0x5F5F5F5F, 
	0x60606060, 0x61616161, 0x62626262, 0x63636363, 0x64646464, 0x65656565, 0x66666666, 0x67676767, 
	0x68686868, 0x69696969, 0x6A6A6A6A, 0x6B6B6B6B, 0x6C6C6C6C, 0x6D6D6D6D, 0x6E6E6E6E, 0x6F6F6F6F, 
	0x70707070, 0x71717171, 0x72727272, 0x73737373, 0x74747474, 0x75757575, 0x76767676, 0x77777777, 
	0x78787878, 0x79797979, 0x7A7A7A7A, 0x7B7B7B7B, 0x7C7C7C7C, 0x7D7D7D7D, 0x7E7E7E7E, 0x7F7F7F7F, 
	0x80808080, 0x81818181, 0x82828282, 0x83838383, 0x84848484, 0x85858585, 0x86868686, 0x87878787, 
	0x88888888, 0x89898989, 0x8A8A8A8A, 0x8B8B8B8B, 0x8C8C8C8C, 0x8D8D8D8D, 0x8E8E8E8E, 0x8F8F8F8F, 
	0x90909090, 0x91919191, 0x92929292, 0x93939393, 0x94949494, 0x95959595, 0x96969696, 0x97979797, 
	0x98989898, 0x99999999, 0x9A9A9A9A, 0x9B9B9B9B, 0x9C9C9C9C, 0x9D9D9D9D, 0x9E9E9E9E, 0x9F9F9F9F, 
	0xA0A0A0A0, 0xA1A1A1A1, 0xA2A2A2A2, 0xA3A3A3A3, 0xA4A4A4A4, 0xA5A5A5A5, 0xA6A6A6A6, 0xA7A7A7A7, 
	0xA8A8A8A8, 0xA9A9A9A9, 0xAAAAAAAA, 0xABABABAB, 0xACACACAC, 0xADADADAD, 0xAEAEAEAE, 0xAFAFAFAF, 
	0xB0B0B0B0, 0xB1B1B1B1, 0xB2B2B2B2, 0xB3B3B3B3, 0xB4B4B4B4, 0xB5B5B5B5, 0xB6B6B6B6, 0xB7B7B7B7, 
	0xB8B8B8B8, 0xB9B9B9B9, 0xBABABABA, 0xBBBBBBBB, 0xBCBCBCBC, 0xBDBDBDBD, 0xBEBEBEBE, 0xBFBFBFBF, 
	0xC0C0C0C0, 0xC1C1C1C1, 0xC2C2C2C2, 0xC3C3C3C3, 0xC4C4C4C4, 0xC5C5C5C5, 0xC6C6C6C6, 0xC7C7C7C7, 
	0xC8C8C8C8, 0xC9C9C9C9, 0xCACACACA, 0xCBCBCBCB, 0xCCCCCCCC, 0xCDCDCDCD, 0xCECECECE, 0xCFCFCFCF, 
	0xD0D0D0D0, 0xD1D1D1D1, 0xD2D2D2D2, 0xD3D3D3D3, 0xD4D4D4D4, 0xD5D5D5D5, 0xD6D6D6D6, 0xD7D7D7D7, 
	0xD8D8D8D8, 0xD9D9D9D9, 0xDADADADA, 0xDBDBDBDB, 0xDCDCDCDC, 0xDDDDDDDD, 0xDEDEDEDE, 0xDFDFDFDF, 
	0xE0E0E0E0, 0xE1E1E1E1, 0xE2E2E2E2, 0xE3E3E3E3, 0xE4E4E4E4, 0xE5E5E5E5, 0xE6E6E6E6, 0xE7E7E7E7, 
	0xE8E8E8E8, 0xE9E9E9E9, 0xEAEAEAEA, 0xEBEBEBEB, 0xECECECEC, 0xEDEDEDED, 0xEEEEEEEE, 0xEFEFEFEF, 
	0xF0F0F0F0, 0xF1F1F1F1, 0xF2F2F2F2, 0xF3F3F3F3, 0xF4F4F4F4, 0xF5F5F5F5, 0xF6F6F6F6, 0xF7F7F7F7, 
	0xF8F8F8F8, 0xF9F9F9F9, 0xFAFAFAFA, 0xFBFBFBFB, 0xFCFCFCFC, 0xFDFDFDFD, 0xFEFEFEFE, 0xFFFFFFFF, 
};

const unsigned char asciivga[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0x81, 0xA5, 0x81, 0x81, 0xBD, 0x99, 0x81, 0x81, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0xFF, 0xDB, 0xFF, 0xFF, 0xC3, 0xE7, 0xFF, 0xFF, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x6C, 0xFE, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0xE7, 0xE7, 0xE7, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x7E, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x00, 0x00, 0x1E, 0x0E, 0x1A, 0x32, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x70, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x63, 0x63, 0x67, 0xE7, 0xE6, 0xC0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0x18, 0xDB, 0x3C, 0xE7, 0x3C, 0xDB, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x02, 0x06, 0x0E, 0x1E, 0x3E, 0x7E, 0x3E, 0x1E, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7F, 0xDB, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7C, 0xC6, 0x60, 0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6C, 0xFE, 0x6C, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7C, 0x7C, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x7C, 0x7C, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x18, 0x7C, 0xC6, 0xC2, 0xC0, 0x7C, 0x06, 0x06, 0x86, 0xC6, 0x7C, 0x18, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xC2, 0xC6, 0x0C, 0x18, 0x30, 0x60, 0xC6, 0x86, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3C, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xFC, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x38, 0x60, 0xC0, 0xC0, 0xFC, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xFE, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x06, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xF8, 0xCC, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xCC, 0xF8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0x60, 0x60, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC6, 0xC6, 0x66, 0x3A, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0x7C, 0x08, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x60, 0x38, 0x0C, 0x06, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0xFE, 0xEE, 0x6C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0x6C, 0x7C, 0x38, 0x38, 0x7C, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xFE, 0xFE, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 
	0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0x60, 0x60, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x3C, 0x6C, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1C, 0x36, 0x32, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C, 0xCC, 0x78, 0x00, 
	0x00, 0x00, 0x60, 0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00, 
	0x00, 0x00, 0x60, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0xD6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C, 0x0C, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x7E, 0x76, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x30, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0xC6, 0x7C, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0E, 0x1E, 0x36, 0x66, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0E, 0x1E, 0x36, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xFF, 0xC3, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xD6, 0xD6, 0x54, 0x54, 0x7C, 0x7C, 0x54, 0xD6, 0xD6, 0xD6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3C, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0xCE, 0xCE, 0xD6, 0xE6, 0xE6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x38, 0x38, 0xC6, 0xC6, 0xCE, 0xCE, 0xD6, 0xE6, 0xE6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x66, 0x66, 0x6C, 0x6C, 0x78, 0x78, 0x6C, 0x6C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0E, 0x1E, 0x36, 0x66, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0xEE, 0xFE, 0xD6, 0xD6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x18, 0x18, 0x7E, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0x6C, 0x7C, 0x38, 0x38, 0x7C, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFE, 0x06, 0x06, 0x00, 0x00, 
	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xFF, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xFF, 0x03, 0x03, 0x00, 0x00, 
	0x00, 0x00, 0xF0, 0x30, 0x30, 0x30, 0x3C, 0x36, 0x36, 0x36, 0x36, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0xF3, 0xDB, 0xDB, 0xDB, 0xDB, 0xF3, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3E, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xCE, 0xDB, 0xDB, 0xDB, 0xFB, 0xDB, 0xDB, 0xDB, 0xDB, 0xCE, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x06, 0x3C, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x1E, 0x36, 0x66, 0x66, 0x66, 0xFF, 0x81, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0xD6, 0x54, 0x7C, 0x54, 0xD6, 0xD6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x06, 0x0C, 0x06, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xCE, 0xD6, 0xE6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x38, 0x38, 0xC6, 0xC6, 0xCE, 0xD6, 0xE6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x1E, 0x36, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xD6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 
	0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 
	0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0xC6, 0x7C, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0xDB, 0xDB, 0xDB, 0xDB, 0x7E, 0x18, 0x18, 0x18, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFE, 0x06, 0x06, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xFE, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xFE, 0x03, 0x03, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x30, 0x30, 0x3E, 0x33, 0x33, 0x3E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xF6, 0xDE, 0xDE, 0xF6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x06, 0x1E, 0x06, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0xDB, 0xDB, 0xFB, 0xDB, 0xDB, 0xCE, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xCC, 0xCC, 0xFC, 0x6C, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x66, 0x00, 0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x03, 0x02, 0x06, 0x04, 0xCC, 0x68, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3C, 0x42, 0x99, 0xA5, 0xA1, 0xA5, 0x99, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x70, 0xD8, 0x30, 0x60, 0xC8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x7E, 0x00, 0x00, 0x00, 0x00
};

#define BGR(b,g,r)          ((COLORREF)(((BYTE)(r)|((WORD)((BYTE)(g))<<8))|(((DWORD)(BYTE)(b))<<16)))

const unsigned long pal16[16] = {
	BGR(0, 0, 0), BGR(0, 0, 96), BGR(0, 96, 0), BGR(0, 96, 96),
	BGR(96, 0, 0), BGR(96, 0, 96), BGR(96, 96, 0), BGR(192, 192, 192),
	BGR(96, 96, 96), BGR(0, 0, 255), BGR(0, 255, 0), BGR(0, 255, 255),
	BGR(255, 0, 0), BGR(255, 0, 255), BGR(255, 255, 0), BGR(255, 255, 255),
};

const unsigned long pal16_vga[16] = {
	BGR(0, 0, 0), BGR(0, 0, 128), BGR(0, 128, 0), BGR(0, 128, 128),
	BGR(128, 0, 0), BGR(128, 0, 128), BGR(128, 128, 0), BGR(128, 128, 128),
	BGR(192, 192, 192), BGR(0, 0, 255), BGR(0, 255, 0), BGR(0, 255, 255),
	BGR(255, 0, 0), BGR(255, 0, 255), BGR(255, 255, 0), BGR(255, 255, 255),
};

const unsigned long pal16_ega[16] = {
	RGB(0, 0, 0), RGB(0, 0, 128), RGB(0, 128, 0), RGB(0, 128, 128),
	RGB(128, 0, 0), RGB(128, 0, 128), RGB(128, 128, 0), RGB(128, 128, 128),
	RGB(192, 192, 192), RGB(0, 0, 255), RGB(0, 255, 0), RGB(0, 255, 255),
	RGB(255, 0, 0), RGB(255, 0, 255), RGB(255, 255, 0), RGB(255, 255, 255),
};

const unsigned long pal16_pcjr[16] = {
	BGR(0, 0, 0), BGR(0, 0, 128), BGR(0, 128, 0), BGR(0, 128, 128),
	BGR(128, 0, 0), BGR(128, 0, 128), BGR(128, 128, 0), BGR(192, 192, 192),
	BGR(128, 128, 128), BGR(0, 0, 255), BGR(0, 255, 0), BGR(0, 255, 255),
	BGR(255, 0, 0), BGR(255, 0, 255), BGR(255, 255, 0), BGR(255, 255, 255),
};

const unsigned long palcga[5][4] = {
	{BGR(0, 0, 0), BGR(0, 255, 0), BGR(255, 0, 0), BGR(255, 255, 0)},
	{BGR(0, 0, 0), BGR(0, 255, 255), BGR(255, 0, 255), BGR(255, 255, 255)},
	{BGR(0, 0, 0), BGR(0, 255, 0), BGR(255, 0, 0), BGR(255, 255, 96)},
	{BGR(0, 0, 0), BGR(64, 255, 255), BGR(255, 64, 255), BGR(255, 255, 255)},
	{BGR(0, 0, 0), BGR(0, 0, 255), BGR(64, 192, 192), BGR(255, 255, 255)}
};

void set_pixel_320(int x, int y, unsigned int color)
{
	unsigned int *v;
	y = SCREEN_HEIGHT / 2 - y - 1;
	v = &screen[x * 2 + y * 2 * SCREEN_WIDTH];
	v[0] = color;
	v[1] = color;
	v[SCREEN_WIDTH] = color;
	v[SCREEN_WIDTH + 1] = color;
}

void set_pixel_320h(int x, int y, unsigned int color)
{
	unsigned int *v;
	y = SCREEN_HEIGHT - y - 1;
	v = &screen[x * 2 + y * SCREEN_WIDTH];
	v[0] = color;
	v[1] = color;
}

void set_pixel(int x, int y, unsigned int color)
{
	if ((x < 0) || (y < 0) || (x >= SCREEN_WIDTH) || (y >= SCREEN_HEIGHT))
		return;
	y = SCREEN_HEIGHT - y - 1;
	screen[x + y * SCREEN_WIDTH] = color;
}

void set_pixel_fast(int x, int y, unsigned int color)
{
	y = SCREEN_HEIGHT - y - 1;
	screen[x + y * SCREEN_WIDTH] = color;
}

void CGADrawChar8x8(int x, int y, int ch, int attr)
{
	int i, j;
	const unsigned char *f = &ram[0xFFA6E + ch * 8];
	unsigned char b, m;
	unsigned long fg, bg;

	fg = pal16[attr & 0x0F];
	bg = pal16[(attr >> 4) & 0x0F];
	for (i = 0; i < 8; i++)
	{
		for (j = 0, m = 0x80; j < 8; j++)
		{
			b = *f;
			set_pixel_320(x + j, y + i, b & m ? fg : bg);
			m >>= 1;
		}
		f++;
	}
}

void CGADrawChar8x16r(int x, int y, int ch, int attr)
{
	int i, j;
	const unsigned char *f = &asciivga[ch * 16];
	unsigned char b, m;
	unsigned long fg, bg;

	for (i = 0; i < 16; i++)
	{
		fg = pal16[attr & 0x0F];
		bg = pal16[(attr >> 4) & 0x0F];
		for (j = 0, m = 0x01; j < 8; j++)
		{
			b = *f;
			screen[x + j + (SCREEN_HEIGHT - (y + i + 1)) * SCREEN_WIDTH] = b & m ? fg : bg;
			m <<= 1;
		}
		f++;
	}
}

void CGADrawChar8x16(int x, int y, int ch, int attr)
{
	int i, j;
	const unsigned char *f = &asciivga[ch * 16];
	unsigned char b, m;
	unsigned long fg, bg;

	for (i = 0; i < 16; i++)
	{
		fg = pal16[attr & 0x0F];
		bg = pal16[(attr >> 4) & 0x0F];
		for (j = 0, m = 0x80; j < 8; j++)
		{
			b = *f;
			screen[x + j + (SCREEN_HEIGHT - (y + i + 1)) * SCREEN_WIDTH] = b & m ? fg : bg;
			m >>= 1;
		}
		f++;
	}
}

void update_screen_text40_color()
{
	int i, j, k;
	const unsigned char *p = &ram[0xb8000];
	int cx = ram[0x450];
	int cy = ram[0x451];
	int blink = GetTickCount() % 1000 < 500;
	for (i = 0; i < 25; i++)
	{
		for (j = 0; j < 40; j++)
		{
			CGADrawChar8x8(j * 8, i * 8, p[0], p[1]);
			if ((i == cy) && (j == cx))
				if (blink)
					for (k = 0; k < 8; k++)
						screen[k + j * 8 + (SCREEN_HEIGHT - (i * 8 + 7)) * SCREEN_WIDTH] = pal16[p[1] & 0x0F];
			p += 2;
		}
	}
}

void update_screen_text80_color()
{
	int i, j, k;
	const unsigned char *p = &ram[0xb8000];
	int cur = crt_regs[0x0E] * 256 + crt_regs[0x0F];
	int blink = GetTickCount() % 1000 < 500;
	p += (crt_regs[12] * 256 + crt_regs[13]) * 2;
	cur -= crt_regs[12] * 256 + crt_regs[13];

	memset(screen, 0, sizeof(screen));

	int cx = cur % 80;
	int cy = cur / 80;
	for (i = 0; i < 25; i++)
	{
		for (j = 0; j < 80; j++)
		{
			CGADrawChar8x16(j * 8, i * 16, p[0], p[1]);
			if ((i == cy) && (j == cx))
				if (blink)
					for (k = 0; k < 8; k++)
						screen[k + j * 8 + (SCREEN_HEIGHT - (i * 16 + 15)) * SCREEN_WIDTH] = pal16[p[1] & 0x0F];
			p += 2;
		}
	}
}

void update_screen_col320x200()
{
	int i, j, k;
	const unsigned char *p;
	unsigned char b;
	unsigned long c;
	int cgapalindex;

	cgapalindex = 2;
	if (cga_color_cr & 4)
	{
		cgapalindex = 4;
	} else
	{
		if (cga_color_cr & 0x20)
		{
			if (cga_color_cr & 0x10)
				cgapalindex = 3;
			else
				cgapalindex = 1;
		} else
		{
			if (cga_color_cr & 0x10)
				cgapalindex = 2;
			else
				cgapalindex = 0;
		}
	}

	p = &ram[0xb8000];
	for (i = 0; i < 200; i += 2)
	{
		for (j = 0; j < 320; j += 4)
		{
			b = *p++;
			for (k = 0; k < 4; k++)
			{
				c = palcga[cgapalindex][(b >> 6) & 3];
				b <<= 2;
				screen[k * 2 + j * 2 + (SCREEN_HEIGHT - i * 2 - 2) * SCREEN_WIDTH] = c;
				screen[k * 2 + j * 2 + 1 + (SCREEN_HEIGHT - i * 2 - 2) * SCREEN_WIDTH] = c;
				screen[k * 2 + j * 2 + (SCREEN_HEIGHT - i * 2 - 1) * SCREEN_WIDTH] = c;
				screen[k * 2 + j * 2 + 1 + (SCREEN_HEIGHT - i * 2 - 1) * SCREEN_WIDTH] = c;
			}
		}
	}
	p = &ram[0xbA000];
	for (i = 1; i < 200; i += 2)
	{
		for (j = 0; j < 320; j += 4)
		{
			b = *p++;
			for (k = 0; k < 4; k++)
			{
				c = palcga[cgapalindex][(b >> 6) & 3];
				b <<= 2;
				screen[k * 2 + j * 2 + (SCREEN_HEIGHT - i * 2 - 2) * SCREEN_WIDTH] = c;
				screen[k * 2 + j * 2 + 1 + (SCREEN_HEIGHT - i * 2 - 2) * SCREEN_WIDTH] = c;
				screen[k * 2 + j * 2 + (SCREEN_HEIGHT - i * 2 - 1) * SCREEN_WIDTH] = c;
				screen[k * 2 + j * 2 + 1 + (SCREEN_HEIGHT - i * 2 - 1) * SCREEN_WIDTH] = c;
			}
		}
	}
}

void update_screen_ega320x200()
{
	int i, j, k, l;
	const unsigned char *p;
	unsigned char b;
	unsigned long c;

	for (l = 0; l < 4; l++)
	{
		p = &ram[0xB8000 + l * 8192];
		for (i = l; i < 200; i += 4)
		{
			for (j = 0; j < 320; j += 2)
			{
				b = *p++;
				for (k = 0; k < 2; k++)
				{
					c = pal16_pcjr[(b >> 4) & 15];
					b <<= 4;
					set_pixel_320(k + j, i, c);
				}
			}
		}
	}
}

void update_screen_vga320x200()
{
	int i, j;
	const unsigned char *p;
	const unsigned long *pal = (const unsigned long *)vga_palette;

	p = &ram[0xA0000];
	for (i = 0; i < 200; i++)
	{
		for (j = 0; j < 320; j++)
		{
			set_pixel_320(j, i, pal[*p++]);
		}
	}
}

void update_screen_vga640x480x8()
{
	int i, j;
	const unsigned char *p;
	const unsigned long *pal = (const unsigned long *)vga_palette;

	vga_pan = 0;
	p = (unsigned char *)vram;
	for (i = 0; i < 480; i++)
	{
		for (j = 0; j < 640; j++)
		{
			screen[j + (SCREEN_HEIGHT - i - 1) * SCREEN_WIDTH] = pal[*p++];
		}
		p += vga_pan;
	}
}

void update_screen_vga320x200x()
{
	int i, j;
	const unsigned int *p;
	const unsigned long *pal = (const unsigned long *)vga_palette;
	unsigned char b;
	unsigned long c;
	unsigned int d;
	int lines = 200;
	int pixel_shift;
	p = &vram[(crt_regs[12] * 256 + crt_regs[13]) / 1];
	pixel_shift = 0;

	// TODO: find out how to do it right
	if (crt_regs[0x13] > 40)
		vga_pan = (crt_regs[0x13] - (crt_regs[1] + 1) / 2) * 2;
	else
		vga_pan = 0;

	// HPAN
	p += ac_regs[0x13] & 0x0F;

	lines = crt_regs[0x12] + ((crt_regs[7] >> 1) & 0x01) * 256 + ((crt_regs[7] >> 6) & 0x01) * 512;

	if (crt_regs[0x10] & 4)
		lines /= 2;

	if (lines > 240)
	{
		for (i = 0; i < lines; i++)
		{
			for (j = 0; j < 320; j++)
			{
				if ((j & 3) == 0)
					d = *p++;
				else
					d >>= 8;
				b = d;
				c = pal[b];
				if (j - pixel_shift >= 0)
					set_pixel_320h(j - pixel_shift, i, c);
			}
			p += vga_pan;
		}
		return;
	}

	unsigned int *v;

	for (i = 0; i < lines; i++)
	{
		v = &screen[(SCREEN_HEIGHT / 2 - i - 1) * 2 * SCREEN_WIDTH];
		for (j = 0; j < 320; j++)
		{
			if ((j & 3) == 0)
				d = *p++;
			else
				d >>= 8;
			b = d;
			c = pal[b];
			v[0] = c;
			v[1] = c;
			v[SCREEN_WIDTH] = c;
			v[SCREEN_WIDTH + 1] = c;
			v += 2;
		}
		p += vga_pan;
	}
}

void update_screen_bw640x200()
{
	int i, j, k;
	const unsigned char *p;
	unsigned char b;
	unsigned long c;
	p = &ram[0xb8000];
	for (i = 0; i < 200; i += 2)
	{
		for (j = 0; j < 640; j += 8)
		{
			b = *p++;
			for (k = 0; k < 8; k++)
			{
				c = b & 0x80 ? BGR(255, 255, 255) : BGR(0, 0, 128);
				b <<= 1;
				screen[k + j + (SCREEN_HEIGHT - i * 2 - 2) * SCREEN_WIDTH] = c;
				screen[k + j + (SCREEN_HEIGHT - i * 2 - 1) * SCREEN_WIDTH] = c;
			}
		}
		if (p >= &ram[0xba000])
			p -= 8192;
	}
	p = &ram[0xbA000];
	for (i = 1; i < 200; i += 2)
	{
		for (j = 0; j < 640; j += 8)
		{
			b = *p++;
			for (k = 0; k < 8; k++)
			{
				c = b & 0x80 ? BGR(255, 255, 255) : BGR(0, 0, 128);
				b <<= 1;
				screen[k + j + (SCREEN_HEIGHT - i * 2 - 2) * SCREEN_WIDTH] = c;
				screen[k + j + (SCREEN_HEIGHT - i * 2 - 1) * SCREEN_WIDTH] = c;
			}
		}
		if (p >= &ram[0xbc000])
			p -= 8192;
	}
}

void update_screen_bw640x480()
{
	int i, j, k;
	const unsigned char *p;
	unsigned char b;
	unsigned long c;
	p = &ram[0xA0000];
	for (i = 0; i < 480; i++)
	{
		for (j = 0; j < 640; j += 8)
		{
			b = *p++;
			for (k = 0; k < 8; k++)
			{
				c = b & 0x80 ? BGR(255, 255, 255) : BGR(0, 0, 128);
				b <<= 1;
				screen[k + j + (SCREEN_HEIGHT - i - 1) * SCREEN_WIDTH] = c;
			}
		}
	}
}

void update_screen_ega320x200d()
{
	int i, j, k;
	const unsigned int *p;
	unsigned char c;
	unsigned int b;

	p = &vram[(crt_regs[12] * 256 + crt_regs[13]) / 1];
	if (crt_regs[0x13] > 40)
		vga_pan = (crt_regs[0x13] - 40) * 4 - 2;
	else
		vga_pan = 0;
	for (i = 0; i < 200; i++)
	{
		for (j = 0; j < 320; j += 8)
		{
			b = *p++;
			for (k = 0; k < 8; k++)
			{
				c = 0;
				c = (b & 0x80) ? 1 : 0;
				c |= (b & 0x8000) ? 2 : 0;
				c |= (b & 0x800000) ? 4 : 0;
				c |= (b & 0x80000000ul) ? 8 : 0;
				b <<= 1;

				set_pixel_320(j + k, i, BGR(vga_palette[c * 3] << 2, vga_palette[c * 3 + 1] << 2, vga_palette[c * 3 + 2] << 2));
			}
		}
		p += vga_pan;
	}
}

void update_screen_ega640x350()
{
	int i, j, k;
	const unsigned int *p;
	unsigned char c;
	unsigned long b;
	p = vram;
	if (crt_regs[0x13] > 40)
		vga_pan = (crt_regs[0x13] - 40) * 2;
	else
		vga_pan = 0;
	for (i = 0; i < 350; i++)
	{
		for (j = 0; j < 640; j += 8)
		{
			b = *p++;
			for (k = 0; k < 8; k++)
			{
				c = 0;
				c = (b & 0x80) ? 1 : 0;
				c |= (b & 0x8000) ? 2 : 0;
				c |= (b & 0x800000) ? 4 : 0;
				c |= (b & 0x80000000ul) ? 8 : 0;
				b <<= 1;
				screen[k + j + (SCREEN_HEIGHT - i - 1) * SCREEN_WIDTH] = ega_palette[c];
			}
		}
		p += vga_pan;
	}
}

void update_screen_vga640x480()
{
	int i, j, k;
	const unsigned int *p;
	unsigned char c;
	unsigned long b;
	p = vram;
	for (i = 0; i < 480; i++)
	{
		for (j = 0; j < 640; j += 8)
		{
			b = *p++;
			for (k = 0; k < 8; k++)
			{
				c = (b & 0x80) ? 1 : 0;
				c |= (b & 0x8000) ? 2 : 0;
				c |= (b & 0x800000) ? 4 : 0;
				c |= (b & 0x80000000ul) ? 8 : 0;
				b <<= 1;
				screen[k + j + (SCREEN_HEIGHT - i - 1) * SCREEN_WIDTH] = ega_palette[c];
			}
		}
	}
}

void update_screen(HDC hdc)
{
	BITMAPINFO bmi;
	vga_lines = 400;
	switch (vmode)
	{
		case VMODE_BW40x25:
		case VMODE_COL40x25:
			update_screen_text40_color();
			break;
		case VMODE_BW80x25:
		case VMODE_COL80x25:
			update_screen_text80_color();
			break;
		case VMODE_COL320x200:
		case 5:
			update_screen_col320x200();
			break;
		case VMODE_BW640x200:
			update_screen_bw640x200();
			break;
		case VMODE_BW640x480:
			update_screen_bw640x480();
			vga_lines = 480;
			break;
		case VMODE_EGA320x200:
			update_screen_ega320x200();
			break;
		case VMODE_EGA320x200D:
			update_screen_ega320x200d();
			break;
		case VMODE_EGA640x350:
			update_screen_ega640x350();
			vga_lines = 350;
			break;
		case VMODE_VGA320x200:
			if (sq_regs[4] & 0x08)
				update_screen_vga320x200();
			else
				update_screen_vga320x200x();
			break;
		case VMODE_VGA640x480:
			update_screen_vga640x480();
			vga_lines = 480;
			break;
		case VMODE_VGA640x480x8:
			update_screen_vga640x480x8();
			break;
	}

	ZeroMemory(&bmi, sizeof(bmi));

	bmi.bmiHeader.biSize = sizeof(bmi.bmiHeader);
	bmi.bmiHeader.biWidth = SCREEN_WIDTH;
	bmi.bmiHeader.biHeight = SCREEN_HEIGHT;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biBitCount = 32;
	bmi.bmiHeader.biCompression = BI_RGB;
	bmi.bmiHeader.biSizeImage = 0;
	bmi.bmiHeader.biXPelsPerMeter = 96;
	bmi.bmiHeader.biYPelsPerMeter = 96;
	bmi.bmiHeader.biClrImportant = 0;
	bmi.bmiHeader.biClrUsed = 0;

	SetDIBitsToDevice(hdc, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0, SCREEN_HEIGHT, screen, &bmi, DIB_RGB_COLORS);
}

// Windows working good
unsigned int vga_logic(unsigned int v, unsigned int mask)
{
	switch (vga_logic_op)
	{
		case 0: return (v & mask) | (vga_latch.d & (~mask));
		case 1: return (v | (~mask)) & vga_latch.d;
		case 2: return (v & mask) | vga_latch.d;
		case 3: return (v & mask) ^ vga_latch.d;
	}
	return v;
}

void vga_portwrite(unsigned short port, unsigned char value)
{
	/*
	switch (port)
	{
		case 0x3c01:
			if (!ac_index_state)
				fprintf(c0, "ac[%x]: %x\n", ac_index, value);
			break;
		case 0x3c4:
		case 0x3ce:
		case 0x3b4:
		case 0x3d4:
		case 0x3c6:
		case 0x3c7:
		case 0x3c8:
		case 0x3c9:
			break;
		case 0x3c5:
			fprintf(c0, "sq[%x]: %x\n", sq_index, value);
			break;
		case 0x3cf:
			fprintf(c0, "gc[%x]: %x\n", gc_index, value);
			break;
		case 0x3b5:
		case 0x3d5:
			fprintf(c0, "crt[%x]: %x\n", crt_index, value);
			break;
		default:
			fprintf(c0, "[%x]: %x\n", port, value);
			break;
	}
	*/

	switch (port)
	{
		case 0x3C0:
			if (ac_index_state)
			{
				ac_index = value;
			} else
			{
				if (ac_index < sizeof(ac_regs))
					ac_regs[ac_index] = value;
				if (ac_index < 16)
				{
					ega_palette[ac_index] = RGB(
						(value & 0x01 ? 0xAA : 0) | (value & 0x08 ? 0x55 : 0),
						(value & 0x02 ? 0xAA : 0) | (value & 0x10 ? 0x55 : 0),
						(value & 0x04 ? 0xAA : 0) | (value & 0x20 ? 0x55 : 0));
					if (vmode < 0x13)
					{
						vga_palette[ac_index * 3 + 2] = (value & 0x01 ? 0x2A : 0) | (value & 0x08 ? 0x15 : 0);
						vga_palette[ac_index * 3 + 1] = (value & 0x02 ? 0x2A : 0) | (value & 0x10 ? 0x15 : 0);
						vga_palette[ac_index * 3 + 0] = (value & 0x04 ? 0x2A : 0) | (value & 0x20 ? 0x15 : 0);
					}
				}
			}
			ac_index_state = !ac_index_state;
			break;
		case 0x3C4:
			sq_index = value;
			break;
		case 0x3C5:
			if (sq_index < 16)
				sq_regs[sq_index] = value;
			if (sq_index == 2)
				vga_plane_mask = bit_fill[value & 0x0F];
			break;
		case 0x3CE:
			gc_index = value;
			break;
		case 0x3CF:
			if (gc_index < sizeof(gc_regs))
				gc_regs[gc_index] = value;
			switch (gc_index)
			{
				case 0:
					fill_color = bit_fill[value & 0x0F];
					break;
				case 1:
					fill_mask = bit_fill[value & 0x0F];
					break;
				case 2:
					vga_color_compare = value & 0x0F;
					break;
				case 3:
					vga_rotate = value & 0x07;
					vga_logic_op = (value >> 3) & 3;
					break;
				case 4:
					vga_read_map = value & 3;
					break;
				case 5:
					vga_write_mode = value & 3;
					vga_read_mode = (value >> 3) & 1;
					break;
				case 7:
					vga_color_dontcare = value & 0x0F;
					break;
				case 8:
					write_mask = byte_fill[value];
					break;
			}
			break;
		case 0x3C6:
			vga_pal_mask = value;
			break;
		case 0x3C7:
			vga_pal_read_index = value * 4;
			break;
		case 0x3C8:
			vga_pal_index = value * 4;
			break;
		case 0x3C9:
			switch (vga_pal_index & 3)
			{
				case 0:
					vga_palette[(vga_pal_index & (vga_pal_mask << 2)) | 2] = value << 2;
					break;
				case 1:
					vga_palette[(vga_pal_index & (vga_pal_mask << 2)) | 1] = value << 2;
					break;
				case 2:
					vga_palette[(vga_pal_index & (vga_pal_mask << 2)) | 0] = value << 2;
					vga_pal_index++;
					break;
			}
			vga_pal_index++;
			vga_pal_index &= (vga_pal_mask << 2) | 3;
			break;
		case 0x3B4:
		case 0x3D4:
			crt_index = value;
			break;
		case 0x3B5:
		case 0x3D5:
			if (crt_index < 32)
				crt_regs[crt_index] = value;
			break;
		case 0x3DC:
			svga_page = value & 7;
			break;
	}
}

unsigned char vga_portread(unsigned short port)
{
	static int p3da = 0;
	switch (port)
	{
		case 0x3ba:
		case 0x3da:
			ac_index_state = 1;
			p3da++;
			return ports[port];
			return /*ports[port];*/(p3da & 0x04 ? 1 : 0) + (p3da & 0x100 ? 8 : 0);
		case 0x3C1:
			if (ac_index < sizeof(ac_regs))
				return ac_regs[ac_index];
			return 0;
		case 0x3C7:
			return vga_pal_read_index / 4;
		case 0x3C8:
			return vga_pal_index / 4;
		case 0x3C9:
			vga_pal_read_index++;
			vga_pal_read_index &= (vga_pal_mask << 2) | 3;
			switch (vga_pal_read_index & 3)
			{
				case 0:
				case 1:
					return vga_palette[(vga_pal_read_index & (vga_pal_mask << 2)) | 2] >> 2;
				case 2:
					return vga_palette[(vga_pal_read_index & (vga_pal_mask << 2)) | 1] >> 2;
				case 3:
					return vga_palette[(vga_pal_read_index++ & (vga_pal_mask << 2)) | 0] >> 2;
			}
			break;
		case 0x3C4:
			return sq_index;
		case 0x3C5:
			return sq_index < sizeof(sq_regs) ? sq_regs[sq_index] : 0;
		case 0x3CE:
			return gc_index;
		case 0x3CF:
			return gc_index < sizeof(gc_regs) ? gc_regs[gc_index] : 0;
	}
	return 0;
}

unsigned char vga_memread(unsigned int addr)
{
	reg_t r;
	unsigned char *c;

	if (vmode == 0x14)
	{
		c = (unsigned char *)vram;
		return c[addr - 0xA0000 + svga_page * 65536u];
	}

	if ((sq_regs[4] & 0x08) != 0)
		return ram[addr];

	vga_latch.d = vram[addr - 0xA0000];
	if (vga_read_mode == 1)
	{
		r.d = (vga_latch.d & bit_fill[vga_color_dontcare]) ^ bit_fill[vga_color_compare & vga_color_dontcare];

		return ~(r.b[0] | r.b[1] | r.b[2] | r.b[3]);
	}
	return vga_latch.b[vga_read_map];
}

void vga_memwrite(unsigned int addr, unsigned char value)
{
	unsigned int v, r, m;
	unsigned int *p;
	unsigned char *c;
	
	if (vmode == 0x14)
	{
		c = (unsigned char *)vram;
		c[addr - 0xA0000 + svga_page * 65536u] = value;
		return;
	}

	if ((sq_regs[4] & 0x08) != 0)
	{
		ram[addr] = value;
		return;
	}

	p = &vram[addr - 0xA0000];
	switch (vga_write_mode)
	{
		case 0:
			if (vga_rotate)
				value = (value >> vga_rotate) | (value << (8 - vga_rotate));
			v = byte_fill[value];
			v = (fill_color & fill_mask) | (v & (~fill_mask));
			r = vga_logic(v, write_mask);
			break;
		case 1:
			r = vga_latch.d;
			break;
		case 2:
			v = bit_fill[value & 0x0F];
			r = vga_logic(v, write_mask);
			break;
		case 3:
			if (vga_rotate)
				value = (value >> vga_rotate) | (value << (8 - vga_rotate));
			v = byte_fill[value];
			r = vga_logic(fill_color, v & write_mask);
			break;
	}
	m = bit_fill[sq_regs[2] & 0x0F];
	*p = (r & m) | (*p & (~m));
}
